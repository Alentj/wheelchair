#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>

// **WiFi Credentials**
#define WIFI_SSID "Babu"
#define WIFI_PASSWORD "babu5281"

// **Firebase Credentials**
#define FIREBASE_HOST "https://smart-wheel-chair-8574a-default-rtdb.firebaseio.com/"
#define FIREBASE_API_KEY "AIzaSyByByuUdrz46s5OHy09Vc3q3bEfz9HAdYU"
#define FIREBASE_USER_EMAIL "mail2alentj@gmail.com"  
#define FIREBASE_USER_PASSWORD "223721"

// **Motor Driver Pins (L298N)**
#define IN1 D5
#define IN2 D6
#define IN3 D7
#define IN4 D8

// **Ultrasonic Sensor Pins**
#define TRIG_PIN D1
#define ECHO_PIN D2

// **Obstacle Distance Thresholds**
#define STOP_DISTANCE 10
#define SLOW_DISTANCE 20

// **Firebase Objects**
FirebaseConfig config;
FirebaseAuth auth;
FirebaseData fbdo;

// **Function Declarations**
void moveForward();
void moveBackward();
void turnLeft();
void turnRight();
void stopMotors();
void slowDownMotors();
int getDistance();

void setup() {
    Serial.begin(115200);

    // **Setup Motor Pins**
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(IN3, OUTPUT);
    pinMode(IN4, OUTPUT);

    // **Setup Ultrasonic Sensor Pins**
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);

    // **Connect to WiFi**
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("Connecting to WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(500);
    }
    Serial.println("\n‚úÖ WiFi Connected!");
    Serial.print("üåê ESP8266 IP: ");
    Serial.println(WiFi.localIP());

    // **Initialize Firebase**
    config.database_url = FIREBASE_HOST;
    config.api_key = FIREBASE_API_KEY;
    auth.user.email = FIREBASE_USER_EMAIL;
    auth.user.password = FIREBASE_USER_PASSWORD;
    
    Firebase.begin(&config, &auth);
    Firebase.reconnectWiFi(true);
    Serial.println("‚úÖ Firebase Initialized!");
}

void loop() {
    if (!Firebase.ready()) {
        Serial.println("‚ö†Ô∏è Firebase Not Ready! Retrying...");
        delay(1000);
        return;
    }

    int distance = getDistance();
    Serial.print("üîç Distance: ");
    Serial.print(distance);
    Serial.println(" cm");

    if (distance <= STOP_DISTANCE) {
        stopMotors();
        Serial.println("üõë Stopping due to obstacle!");
        return; 
    } else if (distance <= SLOW_DISTANCE) {
        slowDownMotors();
        Serial.println("üê¢ Slowing down due to obstacle!");
    }

    if (Firebase.getString(fbdo, "/wheelchair/command")) {
        String command = fbdo.stringData();
        Serial.println("üì° Received Command: [" + command + "]");

        if (command == "forward") moveForward();
        else if (command == "backward") moveBackward();
        else if (command == "left") turnLeft();
        else if (command == "right") turnRight();
        else if (command == "stop") stopMotors();
        else Serial.println("‚ùå Unknown Command: " + command);
    } else {
        Serial.println("‚ùå Firebase Read Error: " + fbdo.errorReason());
    }

    delay(500);
}

// **Motor Functions**
void moveForward() {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    Serial.println("üöÄ Moving Forward");
}

void moveBackward() {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    digitalWrite(IN3,LOW);
    digitalWrite(IN4, HIGH);
    Serial.println("‚¨ÖÔ∏è Moving Backward");
}


void turnLeft() {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    Serial.println("‚Ü©Ô∏è Turning Left");
}

void turnRight() {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    Serial.println("‚Ü™Ô∏è Turning Right");
}

void stopMotors() {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
    Serial.println("üõë Stopping");
}

void slowDownMotors() {
    analogWrite(IN1, 150);
    analogWrite(IN2, 0);
    analogWrite(IN3, 150);
    analogWrite(IN4, 0);
    Serial.println("üê¢ Slowing Down");
}

// **Ultrasonic Sensor Function**
int getDistance() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    
    long duration = pulseIn(ECHO_PIN, HIGH);
    int distance = duration * 0.034 / 2; 
    return distance;
}
